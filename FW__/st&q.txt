		STACK
		====
		-->LIFO /FILO data structure
		->Elments are inserted or deleted through one end
		called as TOP
		-->INSERTION is called as PUSH
		-->Deletion is called as pop
		->stack can be implemented using arrays or linked list
		
		Stack implementation using Arrays
		================================
		#include<stdio.h>
		#include<stdlib.h>
		#define size 5
		int arr[size];
		int top=-1;
		void push(int ele)
		{
			if(top==size-1)
			{
				printf("stack is full\n");
				return;
			}
			top++;
			arr[top]=ele;
		}
		int pop()
		{
			if(top==-1)
			{
				return -1;
			}
			int ele=arr[top];
			top--;
			return ele
		}
		void display()
		{
			if(top==-1)
			{
				printf("stack is empty\n");
				return;
			}
			int i;
			for(i=top;i>=0;i--)
			{
				printf("%d \t",arr[i]);
			}
			printf("\n");
		}
		int main()
		{
			int ch,ele;
			while(1)
			{
				printf("enter your choice\n");
				printf("1.PUSH \n2.POP \n 3.DISPLAY \n 4.EXIT\n");
				scanf("%d",&ch);
				switch(ch)
				{
					case 1:printf("enter teh eelmnt to insert\n");
						scanf("%d",&ele);
						push(ele);
						break;
					case 2:ele=pop();
						if(ele!=-1)
							printf("%d  got deelted\n",ele);
						else
							printf("stack is empty\n");
						break;
					case 3:display();
						break;
					case 4:exit(2);
					
				}
			}
			
		}



********************************************************
		->LILO /FIFO data structure
		->Elments are inserted through rear & deleted through front
		->Queue can be implemented using arrays or linked list


QUEUE program --> All elements should be moved up by one place 
=============		when 1st (front) element in q ia deleted

		#include<stdio.h>
		#include<stdlib.h>
		#define  SIZE 5
		int arr[SIZE];
		int front=0; //index of first ele
		int rear=-1; //index of last ele
      	
		int insert(int ele)
		{
			if(rear==SIZE-1)
			{
				printf("Queue is full\n");
				return -1;
			}

	            rear++;
			arr[rear]=ele;
			return rear;
		}
		
		int delete()
		{
		    int ele, next;
		    if (rear == -1)
                return -1;
            	ele = arr[front]; //arr[o]
	            next = front;
      	      while (next <rear)
            	{
	                arr[next] = arr[next+1];
      	          next++;
            	}
	            rear--;
			return ele;
		}
	
		void display()
		{
			if(rear == -1)
			{
				printf("Queue is empty\n");
				return;
			}

			int i;
			for(i=front;i<=rear;i++)
			{
				printf("%d \t",arr[i]);
			}
			printf("\n");
		}

		int main()
		{
			int ch,ele;
			while(1)
			{
				printf("enter your choice\n");
				printf("1.INSERT \n2.DELETE \n 3.DISPLAY \n 4.EXIT\n");
				scanf("%d",&ch);
				switch(ch)
				{
					case 1:printf("enter teh eelmnt to insert\n");
						scanf("%d",&ele);
						insert(ele);
						break;
					case 2:ele=delete();
						if(ele!=-1)
							printf("%d  got deelted\n",ele);
						else
							printf("stack is empty\n");
						break;
					case 3:display();
						break;
					case 4:
					default: exit(2);

				}
			}

		}
***************************************************************************************

