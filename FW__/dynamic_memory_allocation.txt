Static Memory allocation:

Int a;
char b;
int arr[10];
int roll[50];
static memory allocation
=========================
int arr[5]; //bytes required is decided at compile time
-->memory is fixed
-->memory from stack or datasegment
Dynamic memory allocation
=============================
-->memory will be allocated through HEAP and runtime
-->flexibility of resizing memory and releasing memory
-------------------------------------------------------------
To allocate Dynamic memory allocation
============================================
-->malloc
			Declaration : void * malloc(size);
-->calloc
			Declaration : void *calloc(n, size);
Resize the Dynamic memory allocation
=====================================
-->realloc 
			
		Declaration : void *realloc(void *ptr, newsize);


Release the dynamic memory
===================================
-->free
			Declaration : void free(void *p);


-->these all library functions define in header file
stdlib.h
		calloc
		======
		int *ptr1=(int *)calloc(2,10);
		
		int *ptr2=(int *)malloc(20);

		-->Deffernce between malloc & calloc
			Memry allocated using calloc will be initialized to 0
			Memry allocated using malloc will be filled with garbage value
			-->Syntax wise declaartionare diffent

-----------------------------------------------------------------------------------------

DMA:

	--->stdlib.h


	malloc,calloc,realloc


	malloc:
	=======
			void * malloc(SIZE_t size);


int main()
{
	int *ptr=(int *)malloc(sizeof(int));
	if(ptr==NULL)
	{	
		printf(“mem allocation failed\n”);
		exit(0);
	}
	
	*ptr=20;
	printf(“%d\n”,*ptr);
int main()
{
	int *ptr=malloc(4*sizeof(int));
	for(i=0;i<4;i++)
		*(ptr++)=10+i;
	for(i=0;i<4;i++)
		printf(“%d\t”,temp[i]);
	free(temp);
	free(temp);
		


}

int main()
{
	int *ptr=(int *)malloc(sizeof(int));
	*ptr=20;
	printf(“%p\n”,ptr);
	printf(“%d\n”,*ptr);
	free(ptr);
	printf(“%p\n”,ptr);
	printf(“%d\n”,*ptr);		

}
void * malloc(size_t size);

	size_t----> typedef of unsigned int
	
	void * malloc(unsigned int size);
	
	--->on success it returns the starting address of the memory which is allocated
	---> on failure it returns NULL.

		malloc(4);
	---->#include<stdlib.h>
 2.calloc:
=========

	void * calloc(size_t num,size_t size); 

	---> it is similar to malloc
	--->1st diff ---> the way we pass the argument varies
	----> values will be initialise with calloc ,but malloc will not initialise the datas.
3.realloc:
==========
	 
	void * realloc(void *oldptr,size_t newsize);


	int *ptr=(int *)malloc(5*sizeof(int));



	ptr2=realloc(ptr,32);

	---> if the size is more the allocated array will be expanded with the new size
	---> if the size is less the allocated memory will be shrinked.
	---> if the size is zero it will behave as free
	---> if the ptr is NULL it will behave as malloc.
------------------------------------------------------------------------------
program

#include<stdio.h>
#include<stdlib.h>
int main()
{
        int *p=malloc(4);//int *p=malloc( sizeof(int)*4);//int a;
        if(p==NULL)
        {
                perror("malloc");
        }
        else{
        printf("%u\n",p);
        p++;
        printf("%u\n",p);
        *p=100;
        printf("%d\n",*p);
        }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
154423304
154423308
100

program 2

#include<stdio.h>
#include<stdlib.h>
int main()
{
        char *p=malloc(4);//int *p=malloc( sizeof(char)*4);//int a;
        if(p==NULL)
        {
                perror("malloc");
        }
        else{
        printf("%u\n",p);
        p++;
        printf("%u\n",p);
        *p='A';
        printf("%c\n",*p);
        }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
163266568
163266569
A
a)
#include<stdio.h>
#include<stdlib.h>
int main()
{
        char *p=malloc(4);//int *p=malloc( sizeof(char)*4);//int a;
        if(p==NULL)
        {
                perror("malloc");
        }
        else{
        printf("%d\n",NULL);
        printf("%u\n",p);
        p++;
        printf("%u\n",p);
        *p='A';
        printf("%c\n",*p);
        }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
0
164560904
164560905
A
$ gcc -E 11.c
int main()
{
 char *p=malloc(4);
 if(p==((void *)0))
 {
  perror("malloc");
 }
 else{
 printf("%d\n",((void *)0));
 printf("%u\n",p);
 p++;
 printf("%u\n",p);
 *p='A';
 printf("%c\n",*p);
 }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
0
164560904
164560905
A

----------------------------------------------------------------------
program 4
NULL=((void *)0)
(calloc)

#include<stdio.h>
#include<stdlib.h>
int main()
{
        char *p=(char *)calloc(1,20);//2 -no of blocks 10-each block size int *p=calloc(20, sizeof(char));//int a;
        if(p==NULL)
        {
                perror("calloc");
        }
        else{
        printf("%u\n",p);
        printf("%d\n",*p);
        p++;
        printf("%u\n",p);
        *p='A';
        printf("%c\n",*p);
        }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
161865736
0
161865737
A
------------------------------------------------------------------------------------
what is memory leak;
	allocated memory and not freed
valgrind
--> sofware if der any memory leak,its capable of detecting that
 $ valgrind ./a.out

free()
#include<stdio.h>
#include<stdlib.h>
int main()
{
        char *p=(char *)calloc(2,10);//2 -no of blocks 4-each block size int *p=calloc( sizeof(char)*4);//int a;
        if(p==NULL)
        {
                perror("calloc");
        }
        else{
        printf("%u\n",p);
        printf("%d\n",*p);
        p++;
        printf("%u\n",p);
        *p='A';
        printf("%c\n",*p);
        free(p);//you should give starting addr 
        }
return 0;
}
$ valgrind ./a.out 
#include<stdio.h>
#include<stdlib.h>
int main()
{
        char *p=(char *)calloc(2,10);//2 -no of blocks 4-each block size int *p=calloc( sizeof(char)*4);//int a;
        if(p==NULL)
        {
                perror("calloc");
        }
        else{
        printf("%u\n",p);
        printf("%d\n",*p);
        p++;
        printf("%u\n",p);
        *p='A';
        printf("%c\n",*p);
        free(p);//you should give starting addr 
        free(p);//you should give starting addr 
        }
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
166395912
0
166395913
A
*** glibc detected *** ./a.out: free(): invalid pointer: 0x09eb0009 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x73e42)[0xb7687e42]
./a.out[0x8048525]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xb762d4d3]
./a.out[0x80483e1]
======= Memory map: ========
08048000-08049000 r-xp 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
08049000-0804a000 r--p 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
0804a000-0804b000 rw-p 00001000 08:08 148953     /home/varsity/ramya/datastructure/a.out
09eb0000-09ed1000 rw-p 00000000 00:00 0          [heap]
b75e4000-b7600000 r-xp 00000000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b7600000-b7601000 r--p 0001b000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b7601000-b7602000 rw-p 0001c000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b7613000-b7614000 rw-p 00000000 00:00 0 
b7614000-b77b3000 r-xp 00000000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b77b3000-b77b5000 r--p 0019f000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b77b5000-b77b6000 rw-p 001a1000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b77b6000-b77b9000 rw-p 00000000 00:00 0 
b77c8000-b77cc000 rw-p 00000000 00:00 0 
b77cc000-b77cd000 r-xp 00000000 00:00 0          [vdso]
b77cd000-b77ed000 r-xp 00000000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b77ed000-b77ee000 r--p 0001f000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b77ee000-b77ef000 rw-p 00020000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
bfd6d000-bfd8e000 rw-p 00000000 00:00 0          [stack]
Aborted (core dumped)
---------------------------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
int main()
{
        int p[20];
        free(p);//you should give starting addr 
//      free(p);//you should give starting addr 

return 0;
}

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 12.c
12.c: In function ‘main’:
12.c:6:6: warning: attempt to free a non-heap object ‘p’ [enabled by default]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
*** glibc detected *** ./a.out: free(): invalid pointer: 0xbfa5ea00 ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x73e42)[0xb75f3e42]
./a.out[0x80483e9]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xb75994d3]
./a.out[0x8048341]
======= Memory map: ========
08048000-08049000 r-xp 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
08049000-0804a000 r--p 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
0804a000-0804b000 rw-p 00001000 08:08 148953     /home/varsity/ramya/datastructure/a.out
08568000-08589000 rw-p 00000000 00:00 0          [heap]
b7550000-b756c000 r-xp 00000000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b756c000-b756d000 r--p 0001b000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b756d000-b756e000 rw-p 0001c000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b757f000-b7580000 rw-p 00000000 00:00 0 
b7580000-b771f000 r-xp 00000000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b771f000-b7721000 r--p 0019f000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b7721000-b7722000 rw-p 001a1000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b7722000-b7725000 rw-p 00000000 00:00 0 
b7735000-b7738000 rw-p 00000000 00:00 0 
b7738000-b7739000 r-xp 00000000 00:00 0          [vdso]
b7739000-b7759000 r-xp 00000000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b7759000-b775a000 r--p 0001f000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b775a000-b775b000 rw-p 00020000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
bfa3f000-bfa60000 rw-p 00000000 00:00 0          [stack]
Aborted (core dumped)
Or
output as segmentatin fault
------------------------------------------------------------------------------

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 10.c
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int *p=malloc(4);//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	p++;
	free(p);
	}
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 10.c
10.c: In function ‘main’:
10.c:11:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int *’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
148680712
*** glibc detected *** ./a.out: free(): invalid pointer: 0x08dcb00c ***
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x73e42)[0xb7606e42]
./a.out[0x80484c8]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xb75ac4d3]
./a.out[0x80483e1]
======= Memory map: ========
08048000-08049000 r-xp 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
08049000-0804a000 r--p 00000000 08:08 148953     /home/varsity/ramya/datastructure/a.out
0804a000-0804b000 rw-p 00001000 08:08 148953     /home/varsity/ramya/datastructure/a.out
08dcb000-08dec000 rw-p 00000000 00:00 0          [heap]
b7563000-b757f000 r-xp 00000000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b757f000-b7580000 r--p 0001b000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b7580000-b7581000 rw-p 0001c000 08:08 522257     /lib/i386-linux-gnu/libgcc_s.so.1
b7592000-b7593000 rw-p 00000000 00:00 0 
b7593000-b7732000 r-xp 00000000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b7732000-b7734000 r--p 0019f000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b7734000-b7735000 rw-p 001a1000 08:08 522236     /lib/i386-linux-gnu/libc-2.15.so
b7735000-b7738000 rw-p 00000000 00:00 0 
b7747000-b774b000 rw-p 00000000 00:00 0 
b774b000-b774c000 r-xp 00000000 00:00 0          [vdso]
b774c000-b776c000 r-xp 00000000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b776c000-b776d000 r--p 0001f000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
b776d000-b776e000 rw-p 00020000 08:08 522216     /lib/i386-linux-gnu/ld-2.15.so
bf9b7000-bf9d8000 rw-p 00000000 00:00 0          [stack]
Aborted (core dumped)
OR
segmentationfault//runtime error
---------------------------------------------------------------------------------------
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 10.c
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int *p=malloc(4);//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	}
	scanf("%d",&p);//here &p is aaddr of *p
	printf("%d",*p);
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 10.c
10.c: In function ‘main’:
10.c:11:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int *’ [-Wformat]
10.c:13:2: warning: format ‘%d’ expects argument of type ‘int *’, but argument 2 has type ‘int **’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
167784456
10
Segmentation fault (core dumped)
-------------------------------------------------------------------------------------------------------------------

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ vi 10.c
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 10.c
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int *p=malloc(4);//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	}
	scanf("%d",p);//here &p is aaddr of *p
	printf("%d",*p);
	free(p);
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 10.c
10.c: In function ‘main’:
10.c:11:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int *’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
167034888
12
12varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ 
-------------------------------------------------------------------------------------------------------------------------------

	Q) Read value into dynamically allocated memory using scanf?

-----------------------------------------------------------------------------------
		#include<sdtio.h>
		#include<stdlib.h>
		int main()
		{
			int *p=(int *)malloc(4);
			if(p==NULL)
			{
				printf("cant alloacte meory\n");
				exit(2);
			}
			scanf("%d",p);
			printf("%d",*p);
			free(p);
			
		}
---------------------------------------------------------------------------------------
	Q) How to create a 1-D array using dynamic memory allocation?

---------------------------------------------------------------------------------------
Allocation for 1-d array:
========================
	
int arr[5]={1,2,3,4,5};
int *ptr=arr;
int i;
for(i=0;i<5;i++)
	printf("%d",*(ptr+i));		//ptr[i]




int main()
{
	int n;
	printf("Enter the no of elements\n");
	scanf("%d",&n);
	int *ptr=(int *)malloc(sizeof(int)*n);
	int i=0;
	for(i=0;i<5;i++)
		ptr[i]=5+i;

	for(i=0;i<5;i++)
		printf("%d",ptr[i]);

	free(ptr+3);//invalid
		    // we can free only from the starting address from                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          where it is allocated.	

	free(ptr);	// deallocates entire array elements.

}

Dynamic 1-D array
===================
array will have constinuose memory allocation

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 10.c
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int i;
	int *p=(int *)malloc(5*sizeof(int));//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	}
	for(i=0;i<5;i++)
	{
		scanf("%d",p+i);//here &p is aaddr of *p ,&p[i]
	}
	for(i=0;i<5;i++)
	{
		printf("%d",*(p+i));//here &p is aaddr of *p,p[i]
	}
	free(p);
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 10.c
10.c: In function ‘main’:
10.c:12:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int *’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
148193288
1
2
3
4
5
12345varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ 
check with valgrind
---------------------------------------------------------------------------------------------------------------

Realloc--
========================
	
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 13.c
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int i;
	int *p=(int *)malloc(5*(sizeof(int)));//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	for(i=0;i<5;i++)
		*(p+i)=i*2;
	for(i=0;i<5;i++)
		printf("%d\n",*(p+i));
	p=(int *)realloc(p,40);//i need 20 bytes more befoe 20 i need 	
	for(i=0;i<10;i++)
		printf("%d\n",*(p+i));
}	
return 0;
}
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 13.c
13.c: In function ‘main’:
13.c:12:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int *’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
137912328
0
2
4
6
8
0
2
4
6
8
135145
0
0
0
0
----------------------------------------------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>
int i=0;
int main()
{
        int *ptr=(int *)malloc(4*sizeof(int));
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<4;i++)
                        scanf("%d",(ptr+i));
                for(i=0;i<4;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        printf("reallocating memeory\n");
        ptr=realloc(ptr,8*sizeof(int));
                for(i=4;i<8;i++)
                        scanf("%d",(ptr+i));
                for(i=0;i<8;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        ptr=realloc(ptr,0); //its same as free
//      free(ptr);
        }
return 0;
}
ramya>>./a.out 
enter elements
1
2
3 
4
1	2	3	4	
reallocating memeory
5
6
7
8
1	2	3	4	5	6	7	8	
ramya>>valgrind ./a.out
==3102== Memcheck, a memory error detector
==3102== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3102== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==3102== Command: ./a.out
==3102== 
enter elements
1
2
3
4
1	2	3	4	
reallocating memeory
5
6
7
8
1	2	3	4	5	6	7	8	
==3102== 
==3102== HEAP SUMMARY:
==3102==     in use at exit: 0 bytes in 0 blocks
==3102==   total heap usage: 2 allocs, 2 frees, 48 bytes allocated
==3102== 
==3102== All heap blocks were freed -- no leaks are possible
==3102== 
==3102== For counts of detected and suppressed errors, rerun with: -v
==3102== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
-------------------------------------------------------------------------------------------------------------------------
realloc for reducing size
==========================
#include<stdio.h>
#include<stdlib.h>
int i=0;
int main()
{
        int *ptr=(int *)malloc(4*sizeof(int));
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<4;i++)
                        scanf("%d",(ptr+i));
                for(i=0;i<4;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        printf("reallocating memeory\n");
        ptr=realloc(ptr,2*sizeof(int));//it will reduce by 8 bytes which was before 16 bytea    
        printf("reallocated\n");
                for(i=0;i<4;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        ptr=realloc(ptr,0);
//      free(ptr);
        }
return 0;
}
ramya>>valgrind ./a.out
==3149== Memcheck, a memory error detector
==3149== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3149== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==3149== Command: ./a.out
==3149== 
enter elements
1
2
3
4
1	2	3	4	
reallocating memeory
reallocated
==3149== Invalid read of size 4
==3149==    at 0x40083D: main (in /home/ramya/datastruct/dynamicmemory/a.out)
==3149==  Address 0x51fc098 is 0 bytes after a block of size 8 alloc'd
==3149==    at 0x4C2CE8E: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3149==    by 0x40080B: main (in /home/ramya/datastruct/dynamicmemory/a.out)
==3149== 
1	2	0	0	
==3149== 
==3149== HEAP SUMMARY:
==3149==     in use at exit: 8 bytes in 1 blocks
==3149==   total heap usage: 2 allocs, 1 frees, 24 bytes allocated
==3149== 
==3149== LEAK SUMMARY:
==3149==    definitely lost: 8 bytes in 1 blocks
==3149==    indirectly lost: 0 bytes in 0 blocks
==3149==      possibly lost: 0 bytes in 0 blocks
==3149==    still reachable: 0 bytes in 0 blocks
==3149==         suppressed: 0 bytes in 0 blocks
==3149== Rerun with --leak-check=full to see details of leaked memory
==3149== 
==3149== For counts of detected and suppressed errors, rerun with: -v
==3149== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
-----------------------------------------------------------------------------------
realloc for as free
==========================
ptr=realloc(ptr,0); same as free
-----------------------------------------------------------
realloc for as malloc
==========================
int *ptr=realloc(NULL,4*sizeof(int));//same as malloc

#include<stdio.h>
#include<stdlib.h>
int i=0;
int main()
{
        int *ptr=realloc(NULL,4*sizeof(int));//same as malloc
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<4;i++)
                        scanf("%d",(ptr+i));
                for(i=0;i<4;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        printf("reallocating memeory\n");
        ptr=realloc(ptr,2*sizeof(int));//it will reduce by 8 bytes which was before 16 bytea    
        printf("reallocated\n");
                for(i=0;i<4;i++)
                        printf("%d\t",*(ptr+i));
        printf("\n");
        }
return 0;
}

ramya>>valgrind ./a.out 
==3805== Memcheck, a memory error detector
==3805== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==3805== Using Valgrind-3.10.0.SVN and LibVEX; rerun with -h for copyright info
==3805== Command: ./a.out
==3805== 
enter elements
1
2
3
4
1	2	3	4	
reallocating memeory
reallocated
==3805== Invalid read of size 4
==3805==    at 0x4007F2: main (in /home/ramya/datastruct/dynamicmemory/a.out)
==3805==  Address 0x51fc098 is 0 bytes after a block of size 8 alloc'd
==3805==    at 0x4C2CE8E: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3805==    by 0x4007C0: main (in /home/ramya/datastruct/dynamicmemory/a.out)
==3805== 
1	2	0	0	
==3805== 
==3805== HEAP SUMMARY:
==3805==     in use at exit: 8 bytes in 1 blocks
==3805==   total heap usage: 2 allocs, 1 frees, 24 bytes allocated
==3805== 
==3805== LEAK SUMMARY:
==3805==    definitely lost: 8 bytes in 1 blocks
==3805==    indirectly lost: 0 bytes in 0 blocks
==3805==      possibly lost: 0 bytes in 0 blocks
==3805==    still reachable: 0 bytes in 0 blocks
==3805==         suppressed: 0 bytes in 0 blocks
==3805== Rerun with --leak-check=full to see details of leaked memory
==3805== 
==3805== For counts of detected and suppressed errors, rerun with: -v
==3805== ERROR SUMMARY: 2 errors from 1 contexts (suppressed: 0 from 0)
-----------------------------------------------------------------------
How to dynamically allocate 1-D array using pointer to array
=============================================================
#include<stdio.h>
#include<stdlib.h>
int i=0;
int main()
{
        int (*ptr)[4]=(int (*)[])malloc(4*sizeof(int));
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<4;i++)
                        scanf("%d",*(ptr+i));
                for(i=0;i<4;i++)
                        printf("%d\t",**(ptr+i));
        printf("\n");
        free(ptr);
        }
return 0;
}
--------------------------------------------------------------------------
	How to dynamically allocate 2-D array using pointer to array
=======================================================
3x2
#include<stdio.h>
#include<stdlib.h>
#define row 3
#define col 2
int i,j;
int main()
{
        int (*ptr)[col]=(int (*)[])malloc(row*col*sizeof(int));
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<row;i++)
                        for(j=0;j<col;j++)
                        scanf("%d",(*(ptr+i)+j));
                for(i=0;i<row;i++){
                        for(j=0;j<col;j++)
                        printf("%d\t",*(*(ptr+i)+j));
        printf("\n");}
        printf("\n");
        free(ptr);
        }
return 0;
}
-------------------------------------------------------------------
2x3

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ vi 14.c +8
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ cat 14.c +8
#include<stdio.h>
#include<stdlib.h>
#define row 2
#define col 3
int main()
{
	int i,j;
	int (*p)[col]=(int (*)[])malloc(row*col*(sizeof(int)));//int *p=malloc( sizeof(int)*4);//int a;
	if(p==NULL)
	{
		perror("malloc");
	}
	else{
	printf("%u\n",p);
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			scanf("%d",&p[i][j]);
		}
	}
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			printf("%d",p[i][j]);
		}
	printf("\n");
	}
	printf("\n");
	free(p);
}			
return 0;
}

varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ gcc 14.c
14.c: In function ‘main’:
14.c:14:2: warning: format ‘%u’ expects argument of type ‘unsigned int’, but argument 2 has type ‘int (*)[3]’ [-Wformat]
varsity@varsity-HP-dx2080-MT-GN203AV:~/ramya/datastructure$ ./a.out 
140894216
1
2
3
4
5
6
123456
-----------------------------------------------------------------------------------------------------------------------------

Assignment :
	How to dynamically allocate 2-D array using array of pointers
==================================================================
#include<stdio.h>
#include<stdlib.h>
#define row 3
#define col 2
int i,j;
int main()
{
        int *ptr[row];
        for(i=0;i<row;i++)
                ptr[i]=(int *)malloc(col*sizeof(int));
        if(ptr==NULL)
        {
                printf("memory not allocated\n");
                exit(0);
        }
        else
        {
                printf("enter elements\n");
                for(i=0;i<row;i++)
                        for(j=0;j<col;j++)
                        scanf("%d",(*(ptr+i)+j));
                for(i=0;i<row;i++){
                        for(j=0;j<col;j++)
                        printf("%d\t",*(*(ptr+i)+j));
        printf("\n");}
        printf("\n");
        for(i=0;i<row;i++)
                free(ptr[i]);
        }
return 0;
}

-------------------------------------------------------------------------------------------
	Assignment
	===========
			
		How to dynamically allocate 2 -D array using array of pointers??
		>> With number of rows fixed-- > int *a[ROW];
		>> Enter both row and column at run time.

------------------------------------------------------------------------------------------------

valgrind ./a.out ---> to check memory leaks.

Int main()
{
	int *ptr=(int *)malloc(4*sizeof(int));
	printf(“%d\n”,*ptr);	//


}
 calloc:

	---> similar to malloc
		void *malloc(size_t size);
		malloc(4*sizeof(int));

	---> void * calloc(size_t mem,size_t size)
		----> it is also going to allocate as mem blocks each of size size.	


	Char *cptr=(char *)calloc(1,sizeof(char));
	char *cptr=(char *)malloc(1*sizeof(char));

	int *ptr=(int *)calloc(4,sizeof(int));
		----> if fails it return NULL.

	2) malloc doesnt initialises the data
	   calloc initialises the data.








#define ROW 3
#define COL 3
Int main()
{
	int i,j;
	int *ptr[ROW];
	for(i=0;i<3;i++)
		ptr[i]=(int *)calloc(COL,sizeof(int));
	for(i=0;i<ROW;i++)
		for(j=0;j<COL;j++)
			ptr[i][j]=ptr[i][j]+2;
	for(i=0;i<ROW;i++)
	{
		for(j=0;j<COL;j++)
			printf(“%d\t”,ptr[i][j]);
		printf(“\n”);	
	}
	for(i=0;i<3;i++)
		free(ptr[i]);
}
REALLOC:
=========
 	void *realloc(ptr,newsize);
	

int main()
{
	int *ptr=(int *)malloc(10*sizeof(int));
	for(i=0;i<10;i++)
		ptr[i]=i*10;
	ptr=realloc(ptr,15*sizeof(int));
	


}
------------------------------------------------------------------------------

	#define ROW 3
	#define COL 4

	int main()
	{
		int *ptr[ROW];
		int i,j;
		for(i=0;i<ROW;i++)
			ptr[i]=(int *)malloc(COL*sizeof(int));
	
		for(i=0;i<ROW;i++)
			for(j=0;j<COL;j++)
				*(ptr[i]+j)=10+10*i+j;		//ptr[i][j]
		

		for(i=0;i<ROW;i++)
			for(j=0;j<COL;j++)
				printf("%d\t",ptr[i][j]);



		for(i=0;i<ROW;i++)
			free(ptr[i]);



	}

----------------------------------------------------------------------------------------
	#define ROW 3
	#define COL 4	
	int main()
	{
		int (*ptr)[COL]=malloc(ROW*COL*sizeof(int));
		int i,j;
		for(i=0;i<ROW;i++)
			for(j=0;j<COL;j++)
				ptr[i][j]=10+10*i+j;	//*(ptr[i]+j) //ptr[i][j]
		

		for(i=0;i<ROW;i++)
			for(j=0;j<COL;j++)
				printf("%d\t",ptr[i][j]);
		free(ptr);

	}
------------------------------------------------------------------------
predict the output
===================
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
int main()
{
        char a[]="cranes";
        char *p="bangalore";
        char *temp=a;
        temp=malloc(strlen(p)+1);
        strcpy(temp,p);
        printf("%s %s %s \n",a,p,temp);//cranes bangalore bangalore
}


-------------------------------------------------

int main()
{
	char str[]="hello";
	char *ptr=str;
	ptr++;//valid
	printf("%s",ptr);
	str++;//str=str+1
	printf("%s",str);	
}//compile-time error
---------------------------------------



#include<stdlib.h>
#include<string.h>

							
void fun(char *s)
{
	s=(char *)malloc(10*sizeof(char));
	strcpy(s,"VARSITY");
	printf("s in fun() = %s\n",s);
}

int main()
{
								
	char *s= "CRANES";	
	fun(s);
	printf("s in main() = %s\n",s);
	
}

------------------------------------------------------------------------
#include<stdio.h>
#include<stdlib.h>
#include<string.h>


char * join(char *s1, char *s2)
{
	#define MAXBUF 32
	char buf[MAXBUF];
	strcat(strcpy(buf,s1),s2);
	printf("buf=%s\n",buf);
	return buf;
}	


int main()
{
	printf("%s\n",join("C/C++","programming"));
}
--------------------------------------------------------------------------
